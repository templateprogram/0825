<script setup>
// vue&inertiajs
import { reactive, ref, watch, computed} from 'vue';
import { useForm, router } from '@inertiajs/vue3';
import Loading from '@/Components/ui/Loading.vue';
// layout
import AdminLayout from '@/Layouts/AdminLayout.vue';
// helper
import { formatDate, filterNullValues } from '@/Utils/helpers';
// Icons
import EllipsisHorizontal from '@/Components/Icons/EllipsisHorizontal.vue';
import PlusCircle from '@/Components/Icons/PlusCircle.vue';
import ArrowsUpDown from '@/Components/Icons/ArrowsUpDown.vue';


// 組件
// 全選 排序篩選
import custom from '@/Components/AdminSharedInput/custom.vue';
// import AdminTextInput from '@/Components/AdminSharedInput/AdminTextInput.vue';
import AdminFucList from '@/Components/Shared/AdminFucList.vue';
// 後臺Search Input
import AdminSearch from '@/Components/Shared/AdminSearch.vue';
// 後臺專用的Menu Title
import AdminPagination from '@/Components/Shared/AdminPagination.vue';
// 日期選擇 input
import DateInput from '@/Components/DateInput.vue';
// checkBox
import Checkbox from '@/Components/Checkbox.vue';
// 表單組合 input&label&error
import TextInput from '@/Components/TextInput.vue';
import InputLabel from '@/Components/InputLabel.vue';
import InputError from '@/Components/InputError.vue';
// 對話彈跳視窗
import DialogModal from '@/Components/DialogModal.vue';
// 按鈕組合 基本 次按鈕 篩選按鈕
import PrimaryButton from '@/Components/PrimaryButton.vue';
import SecondaryButton from '@/Components/SecondaryButton.vue';
import FilterButton from '@/Components/FilterButton.vue';
// 下拉選單組
import Dropdown from '@/Components/Dropdown.vue';
import DropdownLink from '@/Components/DropdownLink.vue';
// 響應式連結按鈕
import ResponsiveNavLink from '@/Components/ResponsiveNavLink.vue';
// TinyMCE編輯器
import TinyMce from '@/Components/TinyMce.vue'
import initForm from '@/helpers/form/initializeForm';
// import {clearobj} from '@/helpers/objectWithoutKey'
// 檔案上傳，檔案列表


// 數據資料
// 尋找:ctrl+f >> "表單開始"

//  ANCHOR this is _formInputs

const loading=ref(false);
const _status={
    'active':{
        'title':'上架狀態',
        'status':['下架','上架'],
    },
    // 'front':{
    //    'title':'首頁上架',
    //    'status':['首頁下架','首頁上架'],
    // }
};
const _formInputs={
    //'imgs':{
    //    'name':'圖片單傳',
    //   'type':'img',
    //    'multiple':true,
    //    'attachment':{
    //        'alt':{
    //            'title':'圖片替代文字',
    //        },
    //        'sort':{
    //            'title':'圖片排序',
    //        },
    //    },
        // 'maxFileNumber':5,
        // 'maxSize':5,
    // },
    "name": {   
        'name':'標題',
        'type':'text',

    },
    //"back_body": {
    //    'name':'詳細介紹',
    //    'type':'edt',

    //},
    // "back_body": {
    //     'name':'內容',
    //     'type':'editor',

    // },

    // 'custom_time':['挑選時間','date'],
}

/*
<div>
                                <InputLabel value="名稱" for="name" />
                                <TextInput id="name" name="name" v-model="form.name" type="text" class="block w-full mt-1"
                                    autofocus required autocomplete="name" />
                                <InputError :message="form.errors.name" />
                            </div>
*/


const remoteRouteNamePrefix="{{ namePrefixOfRoute }}";
const props = defineProps({
    theData: Object,
    theSingleData: Object,
    theFilterVariables: Object,
    theDataAllId: Object,
});
// 彈跳對話視窗
const showDialogModal = reactive({
    sort: false,
    edit: false,
    delete: false,
    filter: false,
    bulk: false,
});


// 錯誤提示訊息
const errorMessage = reactive({
    filter: null
});


//1. 查詢內容 & 過濾空的查詢的字段
const queryField = reactive({
    id: null,
    perPage: props.theFilterVariables.perPage || 10,
    search: props.theFilterVariables.search,
    dateSort: props.theFilterVariables.dateSort || 'DESC',
    startDate: props.theFilterVariables.startDate,
    endDate: props.theFilterVariables.endDate,
    page: props.theData.current_page, //要使用項目當前頁面
});
const queryString = computed(() => filterNullValues(queryField))


//2. 搜尋功能，handling裡面如果放reset就會清空查詢
const goSearch = (handling = null) => {
    // 清空數據
    if (handling === 'reset') {
        queryField.search = null;
    }
    // 搜尋要先返回到第1頁
    queryField.page = 1;
    // 重新查詢條件
    router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value);
}


//3. 篩選功能，handling裡面如果放reset就會清空查詢
const goFilter = (handling = null) => {
    // 重製篩選器
    if (handling === 'reset') {
        queryField.startDate = null;
        queryField.endDate = null;
    }

    // 判斷起日不得小於結束日
    if (queryField.startDate <= queryField.endDate) {
        router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value);
        showDialogModal.filter = false;
        errorMessage.value = null;
    } else {
        errorMessage.filter = '起始日不能小於結束日';
    }
}
//ANCHOR initForm
const form=initForm({
    id: queryField?.id,
    formInputs:_formInputs,
})

//4. 選取變量&單頁全選取&全部選取&觀察選取
const checkboxList = reactive({
    selectedItems: [],
    selectedPageAll: false,
    selectedAll: false,
})
const selectionPageAll = () => {
    checkboxList.selectedItems = checkboxList.selectedPageAll ? [] : props.theData.data.map(data => data.id);
    checkboxList.selectedAll = false;
}
const selectionAll = () => {
    checkboxList.selectedItems = props.theDataAllId; //等於全部資料ID
    checkboxList.selectedPageAll = true; //打開全選開關
    queryField.search = null; //搜尋清空
    queryField.page = 1; //回到page1
    checkboxList.selectedAll = true; //全部資料選取
    // 重新查詢資料，保留查詢狀態
    router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value, {
        preserveState: true,
    });
}
watch(() => checkboxList.selectedItems, () => {
    checkboxList.selectedPageAll = checkboxList.selectedItems.length === props.theData.data.length;


    if (checkboxList.selectedItems.length > props.theData.data.length) {
        checkboxList.selectedPageAll = checkboxList.selectedItems.length === props.theDataAllId.length;
    }
})


//5. 排序列表 & 執行排序
const sortFilterList = reactive([
    { title: '日期：新->舊', stauts: 'DESC' },
    { title: '日期：舊->新', stauts: 'ASC' },
])
const goFilterSort = (sortText = null) => {
    queryField.dateSort = sortText;
    router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value);
}


// 6.CRUD 操作
// 建立表單資料

/* 重要:
若不在初始化 form 的時候 將所有key值進行一次賦值，
之後定得使用transform 進行賦值，因為useForm 本身是代理，因此對於其直接賦值的變量。
並不會影響post出去的數值，只有在form 進行 v-model的數值才會被傳出去，除非有先進行transform
*/
// 跟form 有關 是 base64 的儲存夾
const base64ImageArray = {};
// [
// 	{
// 		'multiple':false, // cannot omit with one file or not
// 		'columnOrRelation':'img',
// 		'blobFiles':[]
// 	}
// ]
let imgDataAttributes={};
const giveImgDataAttributes=(columnName,value,multiple)=>{
    imgDataAttributes[columnName]={'data':value,'multiple':multiple};
   
}
const giveImageAttributes=(objArray,column)=>{
    if((!(Array.isArray(objArray)))||base64ImageArray[column]==undefined)
    {
        return;
    }
    base64ImageArray[column].attributeArray=objArray;

}

const giveBase64ImageArray=(baseX,column,multiple)=>{
    base64ImageArray[column]={
        'multiple':multiple,
        'blobFiles':baseX, //  it is array
    }
}
// 觀察props有沒有重新獲取資料，並將資料賦予給form
watch(props, async (value) => {
    if (value.theSingleData.id !== form.id) {
        // TODO watch
        for(const _columnName in _formInputs)
        {
         
            form[_columnName]=props.theSingleData[_columnName];
        }
    }
})
// 新增或編輯視窗判斷 
const titleAddOrEditor = ref(null);
const openAddOrEditor = (id = null) => {
    queryField.id = id;

    if (queryField.id) {
        form.clearErrors();
        titleAddOrEditor.value = '編輯';
        router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value, {
            preserveState: true,
            preserveScroll: true,
            onFinish: () => showDialogModal.edit = true
        });
    } else {
        titleAddOrEditor.value = '新增';
        if (queryField.id) {
            queryField.id = null;
            form.reset();
        }
        router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value, {
            preserveState: true,
            preserveScroll: true,
            onFinish: () => {
                showDialogModal.edit = true;
            }
        });
    }
}
// 編輯更新
const toggleStatus=(id,attribute,status)=>{
    let obj={}; 
    obj[attribute]=status;
    useForm(obj).patch(route(`${remoteRouteNamePrefix}.update`, id), { preserveState: true,onError:(errors)=>{
        //ANCHOR if you want to debug   
    } });
}
const dataUpdate = () => {
    //TODO data update is now weird
    if(props.theSingleData?.id)
    {
        form.transform((data) => ({
            ...data,
            imageFiles:base64ImageArray,
            imgDataAttributes:imgDataAttributes,
        })).put(route(`${remoteRouteNamePrefix}.update`, props?.theSingleData?.id), { preserveState: true,onFinish: () => showDialogModal.edit = false });
    }
    else
    {
        dataStore();
    }
}
// 新增項目
const dataStore = () => {
        form.transform((data) => ({
                ...data,
                imageFiles:base64ImageArray,
        })).post(route(`${remoteRouteNamePrefix}.store`), {
        preserveState: true,
       onSuccess: () => { form.reset(); showDialogModal.edit = false; },
    });
}
const openDelete = (id = null, handling = null) => {
    if (handling === 'bulkDelete') {
        queryField.id = null;
        router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value, { preserveState: true, onFinish: () => showDialogModal.delete = true });
    } else {
        queryField.id = id;
        router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value, { preserveState: true, onFinish: () => showDialogModal.delete = true });
    }
}
// 刪除項目
const dataDestroy = (id) => {
    form.delete(route(`${remoteRouteNamePrefix}.destroy`, id), {
        preserveState: true,
        onFinish: () => { checkboxList.selectedItems = []; showDialogModal.delete = false }
    });
}
// 批量刪除
const bulkDestroy = () => {
    router.post(route(`${remoteRouteNamePrefix}.store`), { postName: 'delete', id: checkboxList.selectedItems }, { onFinish: () => { checkboxList.selectedItems = []; checkboxList.selectedPageAll = false; showDialogModal.delete = false } })
}


// 7.Paginate無限加載
const moreLoad = () => {
    if (queryField.perPage < props.theData.total) {
        queryField.perPage = Number(queryField.perPage) + 5;
        router.get(route(`${remoteRouteNamePrefix}.index`), queryString.value, { preserveScroll: true });
    }
}


// 8.分類處理
const pageCategoryMenu = reactive([
    {
        name: '會員管理',
        routeName: 'admin-member.index'
    },
    {
        name: '會員分類',
        routeName: 'product.category'
    }
]);
const pageCategoryTitle = computed(() => {
    const matchedCategory = pageCategoryMenu.find(category => category.routeName === route().current())
    return matchedCategory.name ?? '請選擇分類'
})

</script>

<template>
    <AdminLayout>

        <!-- header -->
        <template #header>
            <!-- search&advanced -->
            <div class="flex items-center w-full max-w-screen-sm space-x-2">
                <form v-on:submit.prevent="goSearch()" class="flex-1">
                    <AdminSearch @reset="goSearch('reset')" :isSearch="queryField.search" type="text"
                        v-model="queryField.search" placeholder="搜尋關鍵字" />
                </form>
                <button @click="showDialogModal.filter = true" class="text-xs hover:underline">
                    篩選
                </button>
            </div>
        </template>



        <!-- content -->
        <main>
            <!-- 篩選條件 -->
            <section @click="showDialogModal.filter = true" class="grid gap-2 md:grid-cols-2 2xl:grid-cols-4">
                <FilterButton v-if="props.theFilterVariables.startDate && props.theFilterVariables.endDate">
                    日期範圍:{{ props.theFilterVariables.startDate }} ~ {{ props.theFilterVariables.endDate }}
                </FilterButton>
            </section>



            <!-- 新增按鈕 & 分類按鈕 -->
            <section class="flex items-center my-10 space-x-4 item">
                <!-- 新增 -->
                <PlusCircle class="w-16 h-16 transition-all cursor-pointer hover:text-teal-500 focus:text-teal-500"
                    @click="openAddOrEditor()" />

                <!-- 分類 -->
                <section v-if='false' class="block space-x-0 md:items-center md:space-x-4 md:flex ">
                    <Dropdown :align="'left'">
                        <template #trigger>
                            <div
                                class="flex items-center py-1 space-x-2 text-sm border-b border-gray-800 dark:border-gray-600">
                                <div>{{ pageCategoryTitle }}</div>
                                <div>
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1"
                                        stroke="currentColor" class="w-4 h-4">
                                        <path strokeLinecap="round" strokeLinejoin="round"
                                            d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                                    </svg>
                                </div>
                            </div>
                        </template>
                        <template #content>
                            <DropdownLink v-for="category in pageCategoryMenu" :href="category.routeName">
                                {{ category.name }}
                            </DropdownLink>
                        </template>
                    </Dropdown>
                </section>
            </section>


            <!-- 全選&選擇排序區 -->
            <AdminFucList @all="selectionAll()" :selectedAll="checkboxList.selectedAll"
                :selectedItems="checkboxList.selectedItems" :selectedPageAll="checkboxList.selectedPageAll">
                <template #checkbox>
                    <Checkbox @click="selectionPageAll()" v-model:checked="checkboxList.selectedPageAll" />
                </template>
                <template #blukDropMenu>
                    <ResponsiveNavLink @click="openDelete(0, 'bulkDelete')">
                        批量刪除
                    </ResponsiveNavLink>
                </template>
                <template #sortFilter>
                    <Dropdown width="48">
                        <template #trigger>
                            <button type="button"
                                class="flex items-center space-x-2 text-xs hover:text-teal-500 focus:text-teal-500 active:text-teal-500">
                                <div>{{ sortFilterList.find(sort => sort.stauts === queryField.dateSort).title }}</div>
                                <ArrowsUpDown class="w-3 h-3" />
                            </button>
                        </template>

                        <template #content>
                            <div class="block">
                                <ResponsiveNavLink v-for="sort in sortFilterList" @click="goFilterSort(sort.stauts)"
                                    as="button" :active="sort.stauts === queryField.dateSort">
                                    {{ sort.title }}
                                </ResponsiveNavLink>
                            </div>
                        </template>
                    </Dropdown>
                </template>
            </AdminFucList>


            <!-- 帶圖列表 -->
            <section v-for="_singleData in props.theData.data" v-if="props.theData.data[0]" :key="_singleData.id"
                class="items-center block p-6 mb-6 space-y-6 text-sm bg-white border rounded dark:border-gray-700 md:space-y-0 md:space-x-10 md:flex dark:bg-gray-800">
                <!-- 選取&小視窗隱藏 -->
                <Checkbox v-model:checked="checkboxList.selectedItems" :value="_singleData.id" name="remember" />


                <!-- 圖片 -->
             <section v-if="_singleData.url!=undefined" class="w-full md:max-w-[100px]">
                    <div class="relative pb-[100%] w-full ">
                        <img class="absolute inset-x-0 object-cover w-full h-full rounded"
                            :src="`/storage/${_singleData.url}`" />
                    </div>
                </section>

                <!-- 標題&時間 -->
                <section>
                    <p class="mb-2">{{ formatDate(_singleData.created_at) }}</p>
                    <div>
                        <h2 class="text-lg font-bold truncate w-72 sm:w-60 ">{{ _singleData.name }}</h2>
                        <p class="text-xs" v-if="false">{{ _singleData.email }}</p>
                    </div>
                </section>

                <!-- 按鈕&標籤 -->
                <section class="w-full max-w-screen-xl overflow-x-auto touch-auto">
                    <div class="flex items-center w-full py-4 space-x-4">
                        <div v-if="false">
                            <SecondaryButton @click="showDialogModal.sort = true">
                                排序:{{ '1' }}
                            </SecondaryButton>
                        </div>

                        <SecondaryButton v-for=" (val,index) in _status" v-bind:key="index" @click="toggleStatus(_singleData.id,index,!_singleData[index])">
                            <!-- if using parse int will causes some problem like NAN -->
                            <!-- {{  `${_singleData[val[index]]},${val[index]},${val,console.log(val)},${index} ` }} -->
                            {{ val.title }}:{{ val.status[(Boolean(_singleData[index])?1:0)] }}
                        </SecondaryButton>
                    </div>
                </section>

                <!-- 下拉編輯 -->
                <section class="md:justify-end md:flex min-w-fit md:border-0">
                    <Dropdown width="48">
                        <template #trigger>
                            <button type="button"
                                class="flex justify-center w-full py-2 transition-all border rounded dark:border-gray-600 md:border-0 md:block hover:text-teal-500 focus:text-teal-500">
                                <EllipsisHorizontal />
                            </button>
                        </template>

                        <template #content>
                            <DropdownLink as="button" @click="openAddOrEditor(_singleData.id)">
                                編輯
                            </DropdownLink>
                            <DropdownLink as="button" @click="openDelete(_singleData.id)">
                                刪除
                            </DropdownLink>
                        </template>
                    </Dropdown>
                </section>

            </section>
            <section v-else class="text-center">{{ queryField.search ? '找不到搜尋結果' : '尚無項目' }}</section>


            <!-- 分頁 -->
            <section class="flex justify-end py-6">
                <AdminPagination :all="checkboxList.selectedAll" v-if="queryField.perPage < props.theData.total"
                    :ItemData="props.theData.links" />
                <SecondaryButton v-if="queryField.perPage < props.theData.total" class="flex justify-center w-full md:hidden"
                    @click="moreLoad()">
                    加載
                </SecondaryButton>
            </section>
        </main>


        <!-- dialog -->
        <template #dialog>


            <!-- 篩選選項 -->
            <div v-if="showDialogModal.filter">
                <DialogModal :show="showDialogModal.filter" @close="showDialogModal.filter = false">
                    <template #title>
                        進階篩選
                    </template>

                    <template #content>
                        <section class="space-y-4">
                            <div>
                                <InputLabel value="開始日期" />
                                <DateInput class="w-full" v-model="queryField.startDate" />
                            </div>
                            <div>
                                <InputLabel value="結束日期" />
                                <DateInput class="w-full" v-model="queryField.endDate" />
                            </div>
                            <div>
                                <InputError :message="errorMessage.filter" />
                            </div>
                        </section>
                    </template>

                    <template #footer>
                        <div class="flex space-x-4">
                            <SecondaryButton @click="goFilter('reset')">重置</SecondaryButton>
                            <PrimaryButton @click="goFilter">確定</PrimaryButton>
                        </div>
                    </template>
                </DialogModal>
            </div>


            <!-- 編輯&新增 -->
            <div v-if="showDialogModal.edit">
                <DialogModal :show="showDialogModal.edit" @close="showDialogModal.edit = false">
                    <template #title>
                        <h2>{{ titleAddOrEditor }}</h2>
                    </template>


                    <template #content>
                        <form @submit.prevent="props.theSingleData.id ? dataUpdate() : dataStore()" class="space-y-6">
                            <!-- 圖片上傳 -->
                           

                            <!-- 表單開始 -->
                           
                            <!-- ANCHOR - this is formComponents -->
                            <div v-for="(_ui,_columnName) in _formInputs" v-bind:key="_columnName">
                                <custom
                                :imgAttributes="props?.theSingleData?.img_attributes"
                                v-model:changing="form[_columnName]"
                                :columnName="_columnName"
                                :config="_ui"
                                :error="form.errors[_columnName]" 
                                @toggleLoading="loading=!loading"
                                @closeLoading="loading=false"
                                @openLoading="loading=true"
                                @giveImageAttributes="giveImageAttributes"
                                @giveBase64ImageArray="giveBase64ImageArray"
                                @giveImgDataAttributes="giveImgDataAttributes"
                                ></custom>
                       

    
                            </div>
                    
                            <!-- <div>
                                <InputLabel value="名稱" for="name" />
                                <TextInput id="name" name="name" v-model="form.name" type="text" class="block w-full mt-1"
                                    autofocus required autocomplete="name" />
                                <InputError :message="form.errors.name" />
                            </div>
                            <div>
                                <InputLabel value="信箱" />
                                <TextInput :disabled="props.theSingleData.id" id="email" name="email" v-model="form.email"
                                    type="text" class="block w-full mt-1" required autocomplete="email" />
                                <InputError :message="form.errors.email" />
                            </div>
                            <div v-if="!props.theSingleData.id">
                                <InputLabel for="password" value="密碼" />
                                <TextInput id="password" v-model="form.password" type="password" class="block w-full mt-1"
                                    required autocomplete="new-password" />
                                <InputError class="mt-2" :message="form.errors.password" />
                            </div>
                            <div v-if="!props.theSingleData.id">
                                <InputLabel for="password_confirmation" value="再次輸入密碼" />
                                <TextInput id="password_confirmation" v-model="form.password_confirmation" type="password"
                                    class="block w-full mt-1" required autocomplete="new-password" />
                                <InputError class="mt-2" :message="form.errors.password_confirmation" />
                            </div> -->

                            <!-- 編輯器 -->
                            <div v-if="false">
                                <TinyMce v-model="tinyMceText" :fileUploadUrl="'/tinymce'" />
                            </div>
                            <button type="submit" class="hidden"></button>
                        </form>
                    </template>

                    <template #footer>
                        <div class="flex space-x-4">
                            <PrimaryButton v-if="props.theSingleData.id" @click="dataUpdate()"
                                :class="{ 'opacity-25': form.processing }" :disabled="form.processing">
                                更新
                            </PrimaryButton>
                            <PrimaryButton v-else @click="dataStore()" :class="{ 'opacity-25': form.processing }"
                                :disabled="form.processing">
                                新增
                            </PrimaryButton>
                        </div>
                    </template>
                </DialogModal>
            </div>


            <!-- 刪除 -->
            <div v-if="showDialogModal.delete">
                <DialogModal :show="showDialogModal.delete" @close="showDialogModal.delete = false">
                    <template #title>
                        刪除
                    </template>

                    <template #content>
                        <div class="flex items-end space-x-2">
                            <p class="text-xl">您確定要進行刪除?</p>
                            <span v-if="!props.theSingleData.id" class="text-teal-500 text-bold">
                                {{ checkboxList.selectedItems.length }}筆
                            </span>
                            <span class="text-xs">(刪除後將無法恢復項目)</span>
                        </div>
                    </template>

                    <template #footer>
                        <div class="flex space-x-4">
                            <PrimaryButton @click="props.theSingleData.id ? dataDestroy(props.theSingleData.id) : bulkDestroy()">
                                刪除
                            </PrimaryButton>
                        </div>
                    </template>
                </DialogModal>
            </div>


            <!-- 排序(需要再將它開啟) -->
            <div v-if="false">
                <DialogModal :show="showDialogModal.sort" @close="showDialogModal.sort = false">
                    <template #title>
                        修改排序
                    </template>

                    <template #content>
                        <form @submit.prevent="console.log('有需要再打開')">
                            <div>
                                <TextInput id="sort" v-model="form.id" type="text" class="block w-full mt-1" required
                                    autofocus autocomplete="sort" />
                                <InputError class="mt-2" :message="form.id" />
                            </div>
                        </form>
                    </template>

                    <template #footer>
                        <div class="flex space-x-4">
                            <PrimaryButton>保存</PrimaryButton>
                        </div>
                    </template>
                </DialogModal>
            </div>


        </template>
        <Loading v-if="loading" />
    </AdminLayout>
</template>